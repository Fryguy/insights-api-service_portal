=begin
Insights HSDM API

This is a API to fetch and order catalog items from different cloud sources

OpenAPI spec version: 1.0.0
Contact: you@your-company.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'rest_client'
require 'json'

class Provider
  def initialize(options = {})
    @id = options['id']
    @href = options['href']
    @name = options['name']
    @url = options['url']
    @verify_ssl = options['verify_ssl']
    @username   = options['username']
    @password   = options['password']
  end

  def self.all_old
    result = get_response(providers_url)
    result['resources'].collect do |item|
      next unless item['type'] == "ManageIQ::Providers::AnsibleTower::Provider"
      self.new(item)
    end.compact
  end

  def self.all
    result = get_response(providers_url)
    provider = result['resources'].detect do |item|
      item['type'] == "ManageIQ::Providers::AnsibleTower::Provider"
    end
    return [] unless provider
    [self.new(provider)]
  end


  def create(options = {})
    provider_url = "#{api_url}/api/providers?provider_class=provider"
    prov_type = "ManageIQ::Providers::AnsibleTower::Provider"
    post_params = { "action" => "create",
                    "resource" => { "type" => prov_type,
                                    "name" => options['name'],
                                    "verify_ssl" => options['verify_ssl'],
                                    "credentials" => {
                                        "userid"   => options['username'],
                                        "password" => options['password']
                                     },
                                     "url" => options['url']
                                  }
                  }
    post_data(provider_url, post_params.to_json)
  end

  def fetch_catalog_items(catalog_id = nil)
    result = self.class.get_response(self.class.catalog_url)
    result['resources'].collect do |item|
      next if catalog_id && catalog_id != item['id']
      {
         :catalog_id  => item['id'],
         :name        => item['name'],
         :description => item['name'],
         :provider_id => @id
      }
    end.compact
  end

  def self.catalog_url
    URI.join(api_url, "configuration_scripts?expand=resources").to_s
  end

  def self.providers_url
    URI.join(api_url, "providers?expand=resources&provider_class=provider").to_s
  end

  def self.api_url
    URI::HTTP.build(
      :host => ENV["MANAGEIQ_HOST"],
      :port => ENV["MANAGEIQ_PORT"],
      :path => "/api/"
    ).to_s
  end

  def self.get_response(url)
    result = RestClient::Request.new(:method     => :get,
                                     :url        => url,
                                     :user       => ENV["MANAGEIQ_USER"],
                                     :password   => ENV["MANAGEIQ_PASSWORD"],
                                     :verify_ssl => false).execute
    JSON.parse(result.body)
  end

  def self.post_data(url, payload)
    result = RestClient::Request.new(:method     => :post,
                                     :url        => url,
                                     :user       => ENV["MANAGEIQ_USER"],
                                     :password   => ENV["MANAGEIQ_PASSWORD"],
                                     :payload    => payload,
                                     :verify_ssl => false).execute
    JSON.parse(result.body)
  end
end
